generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  username      String
  email         String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  password      String
  comments      Comment[]
  interests     Interest[]
  keywords      Keyword[]
  notifications Notification[]
  savedArticles      SavedArticle[]
  sources       UserSource[]
}

model Interest {
  id        Int      @id @default(autoincrement())
  userId    Int
  interest  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Source {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  url String
  savedArticles    SavedArticle[]
  UserSource UserSource[]
}

model UserSource {
  id       Int    @id @default(autoincrement())
  userId   Int
  sourceId Int
  source   Source @relation(fields: [sourceId], references: [id])
  user     User   @relation(fields: [userId], references: [id])
}

model SavedArticle {
  id          Int            @id @default(autoincrement())
  title       String?
  summary     String?
  url         String @unique
  sourceId    Int
  publishedAt DateTime       @default(now())
  userId      Int
  user        User           @relation(fields: [userId], references: [id])
  source      Source         @relation(fields: [sourceId], references: [id])
  comments    Comment[]
}

model Keyword {
  id         Int    @id @default(autoincrement())
  userId     Int
  keyword    String
  filterType FilterType @default(INCLUDE)
  user       User   @relation(fields: [userId], references: [id])
}

enum FilterType {
  INCLUDE
  EXCLUDE
}


model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  articleId Int
  content   String
  createdAt DateTime @default(now())
  article   SavedArticle  @relation(fields: [articleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  @@unique([userId, type])
}
